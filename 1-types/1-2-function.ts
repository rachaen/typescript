{
  // JavaScript üí©
  // Ïñ¥Îñ§ Í∞íÏùÑ Ï†ÑÎã¨ÌïòÍ≥† Î¶¨ÌÑ¥Ìï¥Ïïº ÌïòÎäî Í≤ÉÏù∏ÏßÄ Î™®Î•¥Îäî Í≤ΩÏö∞Í∞Ä ÏûàÏùå.
  function jsAdd(num1, num2) {
    return num1 + num2;
  }
  // TypeScript ‚≠ê
  function tsAdd(num1: number, num2: number): number {
    return num1 + num2;
  }

  // JavaScript üí©
  function jsFetchNum(id) {
    // code ...
    // code ...
    return new Promise((resolve, reject) => {
      resolve(100);
    });
  }
  // TypeScript ‚≠ê
  function tsFetchNum(id: string): Promise<number> {
    // code ...
    // code ...
    return new Promise((resolve, reject) => {
      resolve(100); // Ïà´ÏûêÏùò Îç∞Ïù¥ÌÑ∞Î•º Î¶¨ÌÑ¥ÌïòÎäî promise
    });
  }

  // ÏïàÏ†ïÏ†ÅÏúºÎ°ú ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç
  // Ï°∞Í∏à Îçî ÎÇòÏùÄ Î¨∏ÏÑúÌôî

  // JavaScriptüí© => TypeScropt ‚≠ê
  // Optional parameter: ? Ï†ÑÎã¨ Î∞õÏùÑÏàòÎèÑ ÏûàÍ≥† ÏïÑÎãêÏàòÎèÑ ÏûàÎã§
  function printName(firstName: string, lastName?: string) {
    console.log(firstName);
    console.log(lastName);
  }
  printName('Steve', 'Jobs');
  printName('Ellie');

  // Default prameter
  function printMessage(message: string = 'default message') {
    console.log(message);
  }
  printMessage();

  // Rest parameter
  function addNumbers(...numbers: number[]): number {
    return numbers.reduce((a, b) => a + b);
  }
  console.log(addNumbers(1, 2));
  console.log(addNumbers(1, 2, 3, 4));
  console.log(addNumbers(1, 2, 3, 4, 0));
}
